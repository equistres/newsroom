{"version":3,"sources":["components/News.js","containers/Modal.js","components/Modal.js","components/Search.js","containers/GetNews.js","App.js","serviceWorker.js","index.js"],"names":["News","item","react_default","a","createElement","className","style","width","height","src","urlToImage","alt","source","name","title","onClick","handleReadMore","itemID","id","target","rel","Modal","createPortal","this","props","children","document","getElementById","Component","handleCloseModal","content","href","url","Search","type","onChange","handleSearch","GetNews","state","handledList","fetched","loading","initialCount","maxCount","Increment","showModal","itemSelected","fnNumerarArray","data","articles","forEach","o","i","localStorage","setItem","JSON","stringify","handleClickNext","inicio","_this","fin","setState","handleClickPrev","handleSort","obj","Object","toConsumableArray","map","pop","list","event","getAttribute","find","q","value","toLowerCase","newList","length","filtrados","filter","includes","parse","listaOriginal","_this2","fetch","api","then","response","json","nextButton","PrevButton","SortButton","cursor","slice","index","src_components_News","key","containers_Modal","src_components_Modal","App","containers_GetNews","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3e845f36.chunk.js","sourcesContent":["import React from 'react';\r\nimport './News.css';\r\n\r\nconst News = (item) => {\r\n        return (\r\n            <div className=\"column\"> \r\n                <div className=\"card mr-2 ml-2 mb-4\" style={{width: '21rem', height:'600px'}}>\r\n                    <div className=\"container\">                 \r\n                        <img src={item.item.urlToImage} className=\"card-img-top\" alt=\"...\" style={{width: '286px', height:'150px'}}/>\r\n                        <span className=\"badge badge-primary bottom-right\">Via {item.item.source.name}</span> \r\n                    </div> \r\n                    <div className=\"card-body\">\r\n                        <h6 className=\"card-title block-with-text\">{item.item.title}</h6>\r\n                        <a onClick={item.handleReadMore} itemID={item.item.id} target=\"_blank\" rel=\"noopener noreferrer\" className=\"btn btn-dark text-white\">Seguir leyendo</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n};\r\n\r\nexport default News;","import { Component } from 'react';\r\nimport { createPortal } from 'react-dom';\r\n\r\nclass Modal extends Component {\r\n    render() {\r\n        return createPortal(\r\n            this.props.children,\r\n            document.getElementById(\"modal-container\")\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal;","import React from 'react';\r\nimport './Modal.css';\r\n\r\nconst Modal = (props) => {\r\n    debugger\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"Modal\" onClick={props.handleCloseModal}>\r\n                <span className=\"Modal-close\"/>\r\n                <img src={props.item.urlToImage} width=\"730\"/>\r\n                <h1>{props.item.title}</h1>\r\n                <p>{props.item.content}</p>\r\n                <div>\r\n                    <a href={props.item.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"btn btn-dark text-white float-right\">Read full article in {props.item.source.name}</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Modal;","import React from 'react'\r\n\r\nexport default function Search(props) {\r\n  return (\r\n    <div>\r\n      <span>Search by Title</span><br/>\r\n      <input type=\"text\" onChange={props.handleSearch}/>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\r\nimport News from '../components/News';\r\nimport ModalContainer from './Modal';\r\nimport Modal from '../components/Modal';\r\nimport '../components/News.css';\r\nimport Search from '../components/Search';\r\n\r\n\r\n\r\n\r\nclass GetNews extends Component {\r\n\r\n    state = {\r\n        handledList:[],\r\n        fetched: false,\r\n        loading: false,\r\n        initialCount: 0,\r\n        maxCount: 5,\r\n        Increment: 5,\r\n        showModal: false,\r\n        itemSelected: null\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        fetch(this.props.api)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.setState({\r\n                    //LLAMO UNA FUNCION QUE LO QUE HACE ES ASIGNARLE UN ID A CADA ELEMENTO DEL ARRAY DE NOTICIAS\r\n                    handledList: data = this.fnNumerarArray(data),\r\n                    loading: true,\r\n                    fetched: true\r\n                });\r\n            });\r\n    }\r\n\r\n    fnNumerarArray = (data) => {\r\n        data.articles.forEach((o, i) => o.id = i + 1)\r\n        localStorage.setItem(\"listaOriginal\", JSON.stringify(data));\r\n        return data\r\n    }\r\n\r\n    handleClickNext = () => {\r\n        let inicio = this.state.initialCount + this.state.Increment;\r\n        let fin = this.state.maxCount + this.state.Increment;\r\n        if (inicio <= 20 && fin <= 20) {\r\n            this.setState({\r\n                initialCount: inicio,\r\n                maxCount: fin\r\n            });\r\n        };\r\n    }\r\n\r\n    handleClickPrev = () => {\r\n        let inicio = this.state.initialCount - this.state.Increment;\r\n        let fin = this.state.maxCount - this.state.Increment;\r\n        if (inicio >= 0) {\r\n            this.setState({\r\n                initialCount: inicio,\r\n                maxCount: fin\r\n            });\r\n        };\r\n    }\r\n\r\n    handleSort = () => {\r\n        //agarro el objeto original\r\n        let obj = this.state.handledList;\r\n        //esta es una funcion que agarra el array y lo da vuelta\r\n        let fnReverse = a =>[...a].map(a.pop,a)\r\n        //reemplazo del objeto original la nueva lista dada vuelta\r\n        obj.articles = fnReverse(this.state.handledList.articles)\r\n        //actualizo el estado y se rerenderea\r\n        this.setState({\r\n            list: obj\r\n        });\r\n\r\n    }\r\n\r\n    handleReadMore = (event) => {\r\n        let id = event.target.getAttribute(\"itemID\");\r\n        var item = this.state.handledList.articles.find(o => o.id == id);\r\n        this.setState({\r\n            itemSelected: item,\r\n            showModal: true\r\n        })\r\n    }\r\n\r\n    handleCloseModal = () => {\r\n        this.setState({\r\n            itemSelected: null,\r\n            showModal: false\r\n        })\r\n    }\r\n\r\n    handleSearch = (event) => {\r\n        let q = event.target.value.toLowerCase();\r\n        const newList = this.state.handledList;\r\n        \r\n        if(q.length>=3){\r\n        //     //filtro todos los resultados que encontro y se guarda en una variable\r\n            let filtrados = newList.articles.filter((item) => {\r\n                return item.title.toLowerCase().includes(q);\r\n            });\r\n\r\n            if(filtrados.length>0){\r\n                newList.articles = filtrados;\r\n                this.setState({\r\n                    handledList: newList,\r\n                    initialCount: 0,\r\n                    maxCount: 20\r\n                })   \r\n            }\r\n\r\n        }else if(q.length<3){\r\n            this.setState({\r\n                handledList: JSON.parse(localStorage.listaOriginal),\r\n                initialCount: 0,\r\n                maxCount: 5\r\n            })\r\n        }\r\n    } \r\n\r\n\r\n\r\n    render() {\r\n        let items = [];\r\n        let nextButton;\r\n        let PrevButton;\r\n        let SortButton;\r\n        const { fetched } = this.state;\r\n        let content;\r\n        if (fetched) {\r\n            if (this.state.maxCount === 20) {\r\n                nextButton = <div className=\"my-auto\"><button type=\"button\" className=\"btn btn-light\">Next</button></div>;\r\n            } else {\r\n                nextButton = <div className=\"my-auto\"><button type=\"button\" className=\"btn btn-dark align-items-center\" onClick={this.handleClickNext}>Next</button></div>;\r\n            }\r\n\r\n            if (this.state.initialCount === 0) {\r\n                PrevButton = <div className=\"my-auto\"><button type=\"button\" className=\"btn btn-light\">Prev</button></div>;\r\n            } else {\r\n                PrevButton = <div className=\"my-auto\"><button type=\"button\" className=\"btn btn-dark\" onClick={this.handleClickPrev}>Prev</button></div>;\r\n            }\r\n\r\n            SortButton = <div className=\"my-auto\"><img onClick={this.handleSort} src=\"https://image.flaticon.com/icons/png/128/1528/1528895.png\" alt=\"Sort\" height=\"50px\" width=\"50px\" style={{cursor: 'pointer'}}/></div>;\r\n            items = this.state.handledList.articles.slice(this.state.initialCount, this.state.maxCount);\r\n            //al no tener una key o id en el api, le paso como key el index, el numero de orden que tiene en el array\r\n            content = items.map(function(item, index) {\r\n                return(\r\n                    <News item={item} key={item.id} handleReadMore={this.handleReadMore}/>\r\n                )\r\n            }, this);\r\n\r\n        } else if (!fetched) {\r\n            content = <p> Loading...</p>;\r\n        } else {\r\n            content = <div />;\r\n        }\r\n        return (\r\n            <div>\r\n                <Search handleSearch={this.handleSearch}/>\r\n                <div className=\"row justify-content-center mt-4\">\r\n                    \r\n                    {PrevButton}\r\n                    {content}\r\n                    {nextButton}\r\n                    {SortButton}\r\n                    {\r\n                        this.state.showModal &&\r\n                        <ModalContainer>\r\n                            <Modal item={this.state.itemSelected} handleCloseModal={this.handleCloseModal}/>\r\n                        </ModalContainer>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GetNews;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport GetNews from './containers/GetNews';\r\n\r\nconst ARGNEWS = \"https://newsapi.org/v2/top-headlines?country=ar&apiKey=91a3bc0b07184b7a8bf352ff162016cd\";\r\nconst USNEWS = \"https://newsapi.org/v2/top-headlines?country=us&apiKey=91a3bc0b07184b7a8bf352ff162016cd\";\r\nconst BRNEWS = \"https://newsapi.org/v2/top-headlines?country=br&apiKey=91a3bc0b07184b7a8bf352ff162016cd\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src=\"https://www.schneiderpr.com/wp-content/uploads/2015/12/SA-Newsroom-Logo.png\" alt=\"newsroom\"/>\r\n        </header>\r\n        <h1>LocalNews</h1>\r\n        <br/>\r\n        <GetNews api={ARGNEWS}/>\r\n        {/* <h1>US News</h1>\r\n        <GetNews api={USNEWS}/>\r\n        <h1>Brasil News</h1>\r\n        <GetNews api={BRNEWS}/> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}