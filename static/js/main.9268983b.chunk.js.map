{"version":3,"sources":["components/News.js","containers/GetNews.js","App.js","serviceWorker.js","index.js"],"names":["News","item","react_default","a","createElement","className","style","width","height","src","urlToImage","alt","source","name","title","description","href","url","target","rel","GetNews","state","list","fetched","loading","initialCount","maxCount","Increment","handleClickNext","inicio","_this","fin","setState","handleClickPrev","handleSort","obj","articles","Object","toConsumableArray","map","pop","_this2","this","fetch","props","api","then","response","json","data","nextButton","PrevButton","SortButton","content","type","onClick","cursor","slice","index","src_components_News","key","Component","App","containers_GetNews","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9268983b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './News.css';\r\n\r\nconst News = (item) => {\r\n        return (\r\n            <div className=\"column\"> \r\n                <div className=\"card mr-2 ml-2 mb-4\" style={{width: '21rem', height:'600px'}}>\r\n                    <div className=\"container\">                 \r\n                        <img src={item.item.urlToImage} className=\"card-img-top\" alt=\"...\" style={{width: '286px', height:'150px'}}/>\r\n                        <span className=\"badge badge-primary bottom-right\">Via {item.item.source.name}</span> \r\n                    </div> \r\n                    <div className=\"card-body\">\r\n                        <h6 className=\"card-title block-with-text\">{item.item.title}</h6>\r\n                        <p className=\"card-text block-with-description\">{item.item.description}</p>\r\n                        <a  href={item.item.url}target=\"_blank\" rel=\"noopener noreferrer\" className=\"btn btn-secondary\">Seguir leyendo</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n};\r\n\r\nexport default News;","import React, { Component } from 'react';\r\nimport News from '../components/News';\r\n\r\n\r\n\r\nclass GetNews extends Component {\r\n\r\n    state = {\r\n        list: [],\r\n        fetched: false,\r\n        loading: false,\r\n        initialCount: 0,\r\n        maxCount: 5,\r\n        Increment: 5\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(this.props.api)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.setState({\r\n                    list: data,\r\n                    loading: true,\r\n                    fetched: true\r\n                });\r\n            });\r\n    }\r\n\r\n    handleClickNext = () => {\r\n        let inicio = this.state.initialCount + this.state.Increment;\r\n        let fin = this.state.maxCount + this.state.Increment;\r\n        if (inicio <= 20 && fin <= 20) {\r\n            this.setState({\r\n                initialCount: inicio,\r\n                maxCount: fin\r\n            });\r\n        };\r\n    }\r\n\r\n    handleClickPrev = () => {\r\n        let inicio = this.state.initialCount - this.state.Increment;\r\n        let fin = this.state.maxCount - this.state.Increment;\r\n        if (inicio >= 0) {\r\n            this.setState({\r\n                initialCount: inicio,\r\n                maxCount: fin\r\n            });\r\n        };\r\n    }\r\n\r\n    handleSort =() => {\r\n        //agarro el objeto original\r\n        let obj = this.state.list;\r\n        //esta es una funcion que agarra el array y lo da vuelta\r\n        let fnReverse = a =>[...a].map(a.pop,a)\r\n        //reemplazo del objeto original la nueva lista dada vuelta\r\n        obj.articles = fnReverse(this.state.list.articles)\r\n        //actualizo el estado y se rerenderea\r\n        this.setState({\r\n            list: obj\r\n        });\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        //console.log(this.state.list.articles)\r\n        let items = [];\r\n        let nextButton;\r\n        let PrevButton;\r\n        let SortButton;\r\n        const { fetched } = this.state;\r\n        let content;\r\n        if (fetched) {\r\n            if (this.state.maxCount === 20) {\r\n                nextButton = <div className=\"my-auto\"><button type=\"button\" className=\"btn btn-dark\">Next</button></div>;\r\n            } else {\r\n                nextButton = <div className=\"my-auto\"><button type=\"button\" className=\"btn btn-dark align-items-center\" onClick={this.handleClickNext}>Next</button></div>;\r\n            }\r\n\r\n            if (this.state.initialCount === 0) {\r\n                PrevButton = <div className=\"my-auto\"><button type=\"button\" className=\"btn btn-dark\">Prev</button></div>;\r\n            } else {\r\n                PrevButton = <div className=\"my-auto\"><button type=\"button\" className=\"btn btn-dark\" onClick={this.handleClickPrev}>Prev</button></div>;\r\n            }\r\n\r\n            SortButton = <div className=\"my-auto\"><img onClick={this.handleSort} src=\"https://image.flaticon.com/icons/png/128/1528/1528895.png\" alt=\"Sort\" height=\"50px\" width=\"50px\" style={{cursor: 'pointer'}}/></div>;\r\n\r\n            items = this.state.list.articles.slice(this.state.initialCount, this.state.maxCount);\r\n            //al no tener una key o id en el api, le paso como key el index, el numero de orden que tiene en el array\r\n            content = items.map(function(item, index) {\r\n                return(\r\n                    <News item={item} key={index} />\r\n                )\r\n            });\r\n\r\n        } else if (!fetched) {\r\n            content = <p> Loading...</p>;\r\n        } else {\r\n            content = <div />;\r\n        }\r\n        return (\r\n            <div className=\"row justify-content-center mt-4\">\r\n                {PrevButton}\r\n                {content}\r\n                {nextButton}\r\n                {SortButton}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GetNews;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport GetNews from './containers/GetNews';\r\n\r\nconst ARGNEWS = \"https://newsapi.org/v2/top-headlines?country=ar&apiKey=91a3bc0b07184b7a8bf352ff162016cd\";\r\nconst USNEWS = \"https://newsapi.org/v2/top-headlines?country=us&apiKey=91a3bc0b07184b7a8bf352ff162016cd\";\r\nconst BRNEWS = \"https://newsapi.org/v2/top-headlines?country=br&apiKey=91a3bc0b07184b7a8bf352ff162016cd\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src=\"https://www.schneiderpr.com/wp-content/uploads/2015/12/SA-Newsroom-Logo.png\" alt=\"newsroom\"/>\r\n        </header>\r\n        <h1>LocalNews</h1>\r\n        <GetNews api={ARGNEWS}/>\r\n        <h1>US News</h1>\r\n        <GetNews api={USNEWS}/>\r\n        <h1>Brasil News</h1>\r\n        <GetNews api={BRNEWS}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}