{"version":3,"sources":["components/News.js","containers/GetNews.js","App.js","serviceWorker.js","index.js"],"names":["News","item","react_default","a","createElement","className","style","width","height","src","urlToImage","alt","source","name","title","description","href","url","target","rel","GetNews","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updatePage","render","handleClickNext","event","inicio","state","initialCount","Increment","fin","maxCount","setState","handleClickPrev","list","fetched","loading","_this2","fetch","api","then","response","json","data","nextButton","PrevButton","content","_this$state","onClick","articles","slice","map","src_components_News","key","publishedAt","Component","App","containers_GetNews","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4a3c92c7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './News.css';\r\n\r\nconst News = (item) => {\r\n        return (\r\n            <div className=\"column\"> \r\n                <div className=\"card mr-2 mb-4\" style={{width: '21rem', height:'600px'}}>\r\n                    <div className=\"container\">                 \r\n                        <img src={item.item.urlToImage} className=\"card-img-top\" alt=\"...\" style={{width: '286px', height:'150px'}}/>\r\n                        <span className=\"badge badge-primary bottom-right\">Via {item.item.source.name}</span> \r\n                    </div> \r\n                    <div className=\"card-body\">\r\n                        <h6 className=\"card-title block-with-text\">{item.item.title}</h6>\r\n                        <p className=\"card-text block-with-description\">{item.item.description}</p>\r\n                        <a  href={item.item.url}target=\"_blank\" rel=\"noopener noreferrer\" className=\"btn btn-primary\">Seguir leyendo</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n};\r\n\r\nexport default News;","import React, { Component } from 'react';\r\nimport News from '../components/News';\r\n\r\n\r\n\r\nclass GetNews extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n          list : [],\r\n          fetched : false,\r\n          loading : false,\r\n          initialCount:0,\r\n          maxCount: 5,\r\n          Increment: 5\r\n        };\r\n    }\r\n    updatePage = () => {\r\n        this.render()\r\n    }     \r\n    componentDidMount(){\r\n        debugger\r\n      fetch(this.props.api)\r\n        .then(response => response.json())\r\n        .then(data=>{\r\n            this.setState({\r\n              list : data,\r\n              loading : true,\r\n              fetched : true\r\n            });\r\n          });\r\n    }\r\n\r\n    handleClickNext = (event) => {      \r\n        let inicio = this.state.initialCount+this.state.Increment;\r\n        let fin = this.state.maxCount+this.state.Increment;\r\n        if(inicio<=20 && fin<=20){\r\n          this.setState({\r\n            initialCount: inicio,\r\n            maxCount : fin\r\n          }, this.updatePage);\r\n        };\r\n    }\r\n\r\n    handleClickPrev = (event) => {      \r\n        let inicio = this.state.initialCount-this.state.Increment;\r\n        let fin = this.state.maxCount-this.state.Increment;\r\n        if(inicio>=0){\r\n          this.setState({\r\n            initialCount: inicio,\r\n            maxCount : fin\r\n          }, this.updatePage);\r\n        };\r\n    }    \r\n\r\n\r\n    render() {\r\n        //console.log(this.state.list.articles)\r\n        let items  = [];\r\n        let nextButton;\r\n        let PrevButton;\r\n        const {fetched, loading} = this.state;\r\n        let content;\r\n        if(fetched){\r\n            if(this.state.maxCount===20)\r\n            {\r\n                nextButton = \"\";\r\n            }else{\r\n                nextButton = <button onClick={this.handleClickNext}>Siguientes</button>;\r\n            }\r\n            if(this.state.initialCount===0)\r\n            {\r\n                PrevButton = \"\";\r\n            }else{\r\n                PrevButton = <button onClick={this.handleClickPrev}>Anteriores</button>;\r\n            }            \r\n            items = this.state.list.articles.slice(this.state.initialCount,this.state.maxCount);\r\n            content =  items.map((item) => {\r\n                return(<News item={item} key={item.publishedAt}/>)\r\n            })\r\n\r\n        }else if(loading && !fetched){\r\n            content = <p> Loading...</p>;\r\n        }else{\r\n            content = <div/>;\r\n        }\r\n        return(\r\n        <div className=\"row justify-content-center mt-4\">\r\n        {PrevButton}\r\n        {content}\r\n        {nextButton}\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GetNews;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport GetNews from './containers/GetNews';\r\n\r\nconst ARGNEWS = \"https://newsapi.org/v2/top-headlines?country=ar&apiKey=91a3bc0b07184b7a8bf352ff162016cd\";\r\nconst USNEWS = \"https://newsapi.org/v2/top-headlines?country=us&apiKey=91a3bc0b07184b7a8bf352ff162016cd\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src=\"https://www.schneiderpr.com/wp-content/uploads/2015/12/SA-Newsroom-Logo.png\" alt=\"newsroom\"/>\r\n        </header>\r\n        <h1>LocalNews</h1>\r\n        <GetNews api={ARGNEWS}/>\r\n        <h1>US News</h1>\r\n        <GetNews api={USNEWS}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}